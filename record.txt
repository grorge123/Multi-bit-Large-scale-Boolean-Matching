// check NonRedundant
#ifdef DBG
    for(int i = 0 ; i < cir1.getInputNum() ; i++){
        vector<int> notEqualCnt(cir2.getOutputNum());
        vector<bool> testCir1Input = cir1Input;
        testCir1Input[i] = !testCir1Input[i];
        if((find(cir1NonRedundant.begin(), cir1NonRedundant.end(), i) == cir1NonRedundant.end())){
            auto oriOutput = cir1.generateOutput(cir1Input);
            auto testOutput = cir1.generateOutput(testCir1Input);
            for(int q = 0 ; q < cir1.getOutputNum() ; q++){
                if(!cir1Counter[q]){
                    notEqualCnt[q] = 10;
                    continue;
                }
                if((oriOutput[q] != testOutput[q])) {
                    notEqualCnt[q]++;
                }
            }
            if(find(notEqualCnt.begin(), notEqualCnt.end(), 0) == notEqualCnt.end()){
                cout << "[TwoStep] cir1 nonRedundant SelfTest1 failed." << i << endl;
                exit(1);
            }else if(!cir1Counter[find(notEqualCnt.begin(), notEqualCnt.end(), 0) - notEqualCnt.begin()]){
                cout << "Code Error" << endl;
                exit(1);
            }
        }
    }
    for(int i = 0 ; i < cir2.getInputNum() ; i++){
        vector<int> notEqualCnt(cir2.getOutputNum());
        vector<bool> testCir2Input = cir2Input;
        testCir2Input[i] = !testCir2Input[i];
        if((find(cir2NonRedundant.begin(), cir2NonRedundant.end(), i) == cir2NonRedundant.end())){
            auto oriOutput = cir2.generateOutput(cir2Input);
            auto testOutput = cir2.generateOutput(testCir2Input);
            for(int q = 0 ; q < cir2.getOutputNum() ; q++){
                if(!cir2Counter[q]){
                    notEqualCnt[q] = 10;
                    continue;
                }
                if((oriOutput[q] != testOutput[q])) {
                    notEqualCnt[q]++;
                }
            }
            if(find(notEqualCnt.begin(), notEqualCnt.end(), 0) == notEqualCnt.end()){
                cout << "[TwoStep] cir2 nonRedundant SelfTest1 failed." << i << endl;
                exit(1);
            }else if(!cir2Counter[find(notEqualCnt.begin(), notEqualCnt.end(), 0) - notEqualCnt.begin()]){
                cout << "Code Error" << endl;
                exit(1);
            }
        }
    }
#endif